type IconDimensions = {
  width: string;
  height: string;
};

export class SCSSFile {
  private icons: Map<string, IconDimensions> = new Map();

  addIcon(id: string, options: { width: string; height: string }): void {
    this.icons.set(id, options);
  }

  toString(): string {
    const comment = "// This file is auto-generated by meteor-icon-kit.";
    const iconIds = Array.from(this.icons.keys());

    if (iconIds.length === 0) {
      return comment;
    }

    // Sort the icon ids in alphabetical order
    iconIds.sort();

    const lines: string[] = [];
    lines.push(comment);

    if (iconIds.length > 1) {
      lines.push("");
    }

    lines.push("#meteor-icon-kit {");

    iconIds.forEach((id, index) => {
      const icon = this.icons.get(id)!;
      lines.push(`  &__${id} {`);
      lines.push(`    width: ${icon.width};`);
      lines.push(`    height: ${icon.height};`);
      lines.push(`  }`);

      if (iconIds.length > 1 && index !== iconIds.length - 1) {
        lines.push("");
      }
    });

    lines.push("}");
    return lines.join("\n");
  }
}
